Reverse Code
Index.js - a function uses sequelize to make sure it runs the right way, then takes a copy of the username, password, and database provided to create the data in mySQL. Then fs returns any file with more than 0 periods, does not equal the basename file, and removes(splices) the .js at the end of the file. For each file create a sequelize model using the imported information. 

User.js -the first thing in this js file is requiring bcryptjs which makes your application more resistant to search attacks. Then it module exports a sequelize function which inputs whatever data the user puts under email and password by creating a table called user and adding it to the database. It also has functionality at the end of it which validates the password and makes sure it has certain credentials before sending the data to the table.

isAutheticated.js - this is middleware, takes the request, if requested if generated by the user, then application will move to the next step, if not generated by logged user, they will automatically be taken to the login page. 

Config.json - creates 3 different environments with a connection to the mysql database where all of the user info is being sent.

Passport.js - first this file requires two npm modules (passport, and passport-local) to authenticate using a username and password in node applications and allows it do this through express. then it exports a function that uses passport to validate the email and password sent by the user, first by checking the email the user inputted and then if given a correct email, matching that to the password associated in the database to the module so it can be referenced elsewhere.

Login.js - first this file makes a reference to all of the different forms and inputs inside the login.html then this file makes it so that when you submit your login data it is put into a userdata variable and parsed to make sure the syntax is valid.the information is then posted to the api/login route and if successful redirects you to your member page.

Members.js - literally just displays each existing member in the span. 

Signup.js - first this file makes a reference to all of the different forms and inputs inside the signup.html then this file makes it so that when you submit your sign up data it is put into a userdata variable and parsed to make sure the syntax is valid.the information is then posted to the api/signup route and if successful redirects you to your member page.

Style.css - this simply makes the divs containing the sign up and the login page go down 50 pixels from where they were originally supposed to be in the html file

Login.html -utilizes bootstrap to create a simple login page with labels and placeholders as well as a submit button and a button to take you to the signup page. Includes code allowing jquery to on its contents.

Members.html - this is the page that you're taken too after successfully logging into the application and all it does is say welcome in the middle of the page and then a logout button at the top of the page which takes you back to the sign in page.

Signup.html - a page to create an account with username and password, code that generates an error if the conditions of each input are not met. A submit button, and script allowing manipulation of its data through jquery. 

Api-routes.js - describes the functionality for all the html routes. This happens after middleware checks for authenticity

Html-routes..js - links routes to all the buttons in the html, to take them to certain web pages based on what is clicked. This happens after middleware checks for authenticity
.
gitignore - a file that allows github to ignore the node modules folder that is created when installing npm packages

Package-lock.json - the file that holds all of the dependencies needed to run the node modules needed to make the application correctly. Dependencies with dependencies!

Package.json - the file that holds all of the node modules required to run the application correctly

Readme.md - the file that explains what steps the coders involved used to write this application

Server.js - this file starts by requiring express and its dependencies and then it establishes a connection from the env to the port then it requires models which allows the server to create or update whatever information the user sends to the table as long as it is valid. Then express is used to create and format the application so that it does certain things like displaying any information returned in json. It also creates static routes to the public folder which is where the javascript code that validates the data sent by the user is held. Express-session keeps track of the login status so that you can see who is logged and how many people are logged on to your server at once. Then passport is initialized so that it can validate the email and make sure it is being sent a correct email with the correct password. Then the routes files are required so that you can decide what page you want to navigate to in the application whether it is signing up or creating your account. Then lastly sequelize starts and listens to the server and notifies you when someone has joined the server and when someone has made made a request to the server
